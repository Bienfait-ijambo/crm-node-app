input CreateAccountInput{
    name: String!
    code:String!
    typeId:Int!
    massId:Int!
    userId:Int!
}

input UpdateAccountInput{
    id:ID!
    name: String!
    code:String!
    typeId:Int!
    massId:Int!
    userId:Int!
}

type CreateAccountResponse{
    id:ID!
    name: String!
    code:String!
    typeId:Int!
    massId:Int!
}



type Mutation{
    createAccount(input:CreateAccountInput!):CreateAccountResponse!
    updateAccount(input:UpdateAccountInput!):CreateAccountResponse!

}

type AccountType{
    id:String!
    name:String!
}

type AccountMass{
    id:String!
    name:String!
}


type AccountResponse{
    id:ID!
    name: String!
    code:String!
    accountType:AccountType!
    mass:AccountMass!
}


type CreateAccountResponse{
    accounts:[AccountResponse]!
    count:Int!
   totalPages:Int!

}

input SearchAccountInput{
    userId:Int!
    accountName:String!
    page:Int!
    code:String!
    searchType:Int!
}


# name:String,typeId:Int,massId:Int
type Query{
    accounts(input:SearchAccountInput!):CreateAccountResponse!
}

input TreasuryAccountInput{
    userId:Int!
}

type CreateTreasuryAccountResponse{
    accountname:String!
    accountcode:Int!
    totalamount:String!
}


type Query{
    treasuryAccounts(input:TreasuryAccountInput!):[CreateTreasuryAccountResponse!]!
}
input LoginInput{
    email:String!
    telephone:String!
    password:String!
    loginByInputType:String!
   
}


type Tokens{
    accessToken:String
    refreshToken:String
}

type UserAuthResponse{
    id:Int
    email:String
    userName:String
    image:String
    role:String
    userCode:String
    telephone:String

}

type CreateActionResponse{
  id:Int!
  name:String!
}

type CreateUserPermissionResponse{
  id:Int!
  name:String!
  userId:Int!
  actions:[CreateActionResponse!]!
}




type AuthReturnType{
    response:ClientResponse!
    user:UserAuthResponse
    tokens:Tokens
    permissions:[CreateUserPermissionResponse]
    # You can find the #CreateEnterPriseInfoResponse in authSchema
    enterpriseInfo:CreateEnterPriseInfoResponse
}



type Mutation{
    loginUser(input:LoginInput!):AuthReturnType
    getTokens(token:String!):Tokens
    loginUserViaOAuth(userProviderId:String!):AuthReturnType
}

type Message{
    status:Int!
    message:String!
}
type ClientResponse{
    message: String!
    success:Boolean!
    isValidEmail:Boolean!
    status: Int!
}

type ActionResponse{
    id:Int!
    name:String!
    status:Boolean!
}

type CreatePageResponse{
    id:Int
    name:String
    displayName:String!
    actions:[ActionResponse]
}
type Query{
    pages:[CreatePageResponse!]!
}input UpdateJournalInput {
  id: ID!
  accountId: Int!
  description: String!
  projectId: Int!
  amount: String!
  transactionType: Int!
  sold: String!
}

input CreateJournalInput {
  accountId: Int!
  massId: Int!
  accountType:Int!
  description: String!
  createdAt: String!
  draw:Boolean!
  projectId: Int!
  serviceId: Int!
  amount: String!
  transactionType: Int!
  userId: Int!
}



type CreateJournalResponse {
  id: ID!
  accountId: Int!
  description: String!
}

type Mutation {
  recordTransaction(input: [CreateJournalInput!]!): CreateJournalResponse!
  editTransaction(input: UpdateJournalInput!): CreateJournalResponse!
}


input CreateJournalSearchInput{
    accountName:String!
    projectId:Int!
    transactionType:Int!
    date:String!
    userId:Int!
    page:Int!
}

type accountType{
 id:Int!
 name:String!
}

type mass{
 id:Int!
 name:String!
}

type account{
    id:Int!
    name:String!
    code:String!
    accountType:accountType!
    mass:mass!
}

type partner{
    id:Int!
    name:String!
    email:String!
    telephone:String!
}

type project{
    id:Int!
    designation:String!
    cost:String!
    partner:partner!
}

enum EnumTransactionType { 
    DEBIT
    CREDIT
}

type Journals{
     id:Int!
     description:String!
     amount:String!
     transactionType:Int!
     income:String!
     expense:String!
     draw:Boolean!
     transactionCode:String!
     createdAt:Date!
     account:account!
}

type Balance{
    accountId:Int!
    userId:Int!
    accountName:String!
    accountCode:String!
    accountType:String!
    massName:String!
    totalAmount:Float!
    totalIncome: Float!,
    totalExpense: Float!
}

type CreateBalanceResponse{
    journals:[Balance!]!
    count: Int!
    totalPages: Int!
}



type CreateJournalResponse{
    journals:[Journals!]!
    count: Int!
    totalPages: Int!
}


type CreateGeneralLedgerResponse{
    accountName:String!
    accountCode:String!
    totalAmount:Float!
    transactionType:Int!
    accountId:Int!
}

input CreateGeneralLedgerInput{
    accountName:String!
    transactionType:Int!
    projectId:Int!
    accountId:[Int!]!
    startDate:String!
    endDate:String!
    userId:Int!
    page:Int!
}


input CreateBalanceInput{
    page:Int!
    projectId:Int!
    startDate:String!
    endDate:String!
    userId:Int!
}


input CreateExpenseVsEarningInput{
    createdAt:String!
    userId:Int!
} 

type CreateExpenseVsEarningResponse{
    totalExpenses:String!
    totalEarnings:String!
}


input CreateTransactionDetailByAccountInput{
    projectId:Int!
    serviceId:Int!
    userId:Int!
    startDate:String!
    endDate:String!
    accountId:Int!
    page:Int!
}


type SingleAccountOperations{
   id:Int!
    amount:String!
    transactionType:Int!
    description:String!
    createdAt:Date!
}

type CreateAccountDetailByAccount{
    transactions:[SingleAccountOperations!]!
    count: Int!
    totalPages: Int!
}
input CreatePreviousTreasuryOp{
    userId: Int!
    currDate:Date!
}

type CreatePreviousTreasuryOpResponse{
    totalCreditAmount:String!
    totalDebitAmount:String!
    createdAt:Date!
}
type Query{
    journals(input:CreateJournalSearchInput!):CreateJournalResponse!
    balance(input:CreateBalanceInput!):CreateBalanceResponse!
    generalLedger(input:CreateGeneralLedgerInput!):[CreateGeneralLedgerResponse!]
    expensesVsEarnings(input:CreateExpenseVsEarningInput!):CreateExpenseVsEarningResponse!
    transactionDetailByAccount(input:CreateTransactionDetailByAccountInput!):CreateAccountDetailByAccount!
    getPreviousTreasuryOp(input:CreatePreviousTreasuryOp!):[CreatePreviousTreasuryOpResponse!]!

}

input CreateMassInput {
  name: String!
}


input UpdateMassInput {
  id:ID!
  name: String! 
}




type Mutation{
    createMass(input: CreateMassInput!):CreateMassResponse!
    updateMass(input: UpdateMassInput!):CreateMassResponse!
}

type CreateMassResponse{
  id:Int!
  name: String!
}


type Query{
    masses:[CreateMassResponse!]
}input CreatePartnerInput{
    name:String!
    email:String!
    telephone:String!
    userId:Int!
}


input UpdatePartnerInput{
    id:ID!
    name:String!
    email:String!
    telephone:String!
}

type CreatePartnerResponse{
    id:Int!
    name:String!
    email:String!
    telephone:String!
}

type Mutation{
    createPartner(input:CreatePartnerInput!):CreatePartnerResponse!
    updatePartner(input:UpdatePartnerInput!):CreatePartnerResponse!

}
type GetAllPartnerResponse{
   partners:[CreatePartnerResponse!]!
   count:Int!
   totalPages:Int!
}



type Query{
    partners(name:String!,userId:Int!,page:Int!):GetAllPartnerResponse!
}

input CreatePojectInput{
  designation: String!
  amount: String!
  partnerId: Int!
  userId: Int!
  status: Int!
}


input UpdatePojectInput{
  id: ID!
  designation: String!
  partnerId: Int!
  userId: Int!
  status: Int!
}

type CreateProjectResponse{
   id: Int!
  designation: String!
  amount: String!
  partnerId: Int!
  userId: Int!
}
input AffectAmountToProjectInput{
    userId:Int!
    projectId:Int!
    amount:String!
    status:Boolean!
}
type CreateAffectAmountToProjectResponse{
  success:Boolean!
}
type Mutation{
    createProject(input:CreatePojectInput!):CreateProjectResponse!
    updateProject(input:UpdatePojectInput!):CreateProjectResponse!
    affectAmountToProject(input:AffectAmountToProjectInput!):CreateAffectAmountToProjectResponse!

}



type CreateProjectPartnerResponse {
  id: Int!
  name: String!
  email: String!
  telephone: String!
}

type ProjectPayment{
  id:Int!
  amount:String!
  createdAt:Date!
}
type GetAllProjects {
  id: Int!
  designation: String!
  amount: String!
  paidAmount: String! 
  status: Int!
  projectPayment:[ProjectPayment!]!
  partner: CreateProjectPartnerResponse!
}



type GetAllProjectPartnersResponse {
  projects: [GetAllProjects!]!
  count: Int!
  totalPages: Int!
}

type GetProjectIdAndNameResponse {
  id:Int!
  designation:String!
}

input GetProjectIdAndNameInput{
  designation:String!
    userId:Int!
    page:Int!
}

type CreateGetProjectAmountResponse{
  amount:String
  paidAmount:String
}

type Query {
  getProjectAmount(userId:Int!,projectId:Int!):CreateGetProjectAmountResponse!
  projects( name: String! userId: Int! page: Int! ): GetAllProjectPartnersResponse!
  projectIdAndName(input:GetProjectIdAndNameInput!):[GetProjectIdAndNameResponse!]!
}
type CreateRoleResponse{
    name:String!
}


type Query{
    roles:[CreateRoleResponse!]!
}scalar Date

scalar Upload
input CreateServiceInput{
    name:String!
    userId:Int!
}


input UpdateServiceInput{
    id:Int!
    name:String!
    userId:Int!

   
}

type CreateServiceResponse{
    id:Int!
    name:String!
    gainAmount:String!
}

type Mutation{
    createService(input:CreateServiceInput!):CreateServiceResponse!
    updateService(input:UpdateServiceInput!):CreateServiceResponse!

}
type services{
   services:[CreateServiceResponse!]!
   count:Int!
   totalPages:Int!
}


type ServicePaymentField{
    amount:String!
    status:Int!
}

type ServicePaymentFields{
    id:Int!
    name:String!
    servicePayment:[ServicePaymentField!]!
}

type ServicePaymentResponse{
    services:[ServicePaymentFields!]!
   count:Int!
   totalPages:Int!
}

input ServicePaymentInput{
userId:Int!
page:Int!
date:String!
}

type Query{
    services(name:String!,userId:Int!,page:Int!):services!
    servicesPayment(input:ServicePaymentInput!):ServicePaymentResponse!
}input GrossMarginInput {
  chargeAccount: AccountInput!
  profitAccount: AccountInput!
  period: String!
  userId: Int!
}

input AccountInput {
  code: Float
  amount: Float!
  transactionType: TransactionTypeInput!
}

input TransactionTypeInput {
  name: String!
  val: Int!
}



type CreateGrossMarginResponse{
    message: String!
}



type Mutation{
    createGrossMargin(input: GrossMarginInput!):CreateGrossMarginResponse!
}



# [ { "id": 0, "account": 80, "rowStatus": "ADD", "amount": "10", "transactionType": 1 }, 
# { "id": 1, "account": "13", "rowStatus": "REMOVE", "amount": "8", "transactionType": 2 } ]

input CreateValueAddedInput {
  account:Int!
  amount: Float!
  transactionType:Int!
  userId:Int!
  period:String!
}



type CreateValueAddedResponse{
    message: String!
}



type Mutation{
    createValueAdded(input: [CreateValueAddedInput!]!):CreateValueAddedResponse!
}



# [ { "id": 0, "account": 80, "rowStatus": "ADD", "amount": "10", "transactionType": 1 }, 
# { "id": 1, "account": "13", "rowStatus": "REMOVE", "amount": "8", "transactionType": 2 } ]
input CreateTypeInput {
  name: String!
  massId: Int!  
}


input UpdateTypeInput {
   id:ID!
  name: String!
  massId: Int!  
}


type CreateTypeResponse{
  name: String!
  massId: Int!  
}

type Mutation{
    createType(input: CreateTypeInput!):CreateTypeResponse!
    updateType(input: UpdateTypeInput!):CreateTypeResponse!

}



type Masses{
  id:Int!
  name: String!
}

type Types{
  id:Int!
  name: String!
  masses: [Masses!]!  
}


type AccountTypes{
  id:Int!
  name: String!
}

input CreateBilanInput{
  page:Int!
  userId:Int!
  startDate:String!
  endDate:String!
}

type CreateJournalBilanResponse{
     id:Int!
     description:String!
     amount:String!
     transactionType:Int!
     income:String!
     expense:String!
     draw:Boolean!
     transactionCode:String!
     createdAt:Date!
     account:account!
}


type CreateBilanAccountResponse{
   id:Int!
   name:String!
   code:String!
   journals:[CreateJournalBilanResponse!]!
    
}
type CreateBilanMassResponse{
  id:Int!
  name: String!
  status: Int!
  account:[CreateBilanAccountResponse!]!
 
}

type AccountTypes{
  masses:[CreateBilanMassResponse]!
  count: Int!
  totalPages: Int!
  
}

input CreateAccountResultInput{
  page:Int!
  userId:Int!
  startDate:String!
  endDate:String!
}

type Query{
    types:[Types!]!
    accountTypes:[AccountTypes!]!
    bilan(input:CreateBilanInput!):AccountTypes!
    getAccountResult(input:CreateAccountResultInput!):AccountTypes!

}

type CreateUserResponse{
    id:ID!
    email:String! 
    role:String! 
}




input UserInput{
    email:String! 
    role:String! 
    password:String! 
    terms:Boolean!
}

input UpdateUserInput{
    userName:String!
    telephone:String!
    email:String!
}

input updateUserPasswordInput{
    id:Int!
    passwordConfirm:String!
    newPassword:String!
}

input VerifyOptNumberInput{
    email:String!
    otpNumber:String!
}


type File {
  name: String!
  type: String!
  size: Int!
  path: String!
}

type VerifyOtpResponse{
   success:Boolean!
}

type CreateUpdateUserResponse{
    success:Boolean!
}

input CreateUserOwnByMainUserInput{
    email:String! 
    role:String! 
    userCode:String!
    password:String! 
    terms:Boolean!
    ownByUserId:Int!
}


input UserActions{
  id:Int!
  name:String!
}

input CreateUserPermissionInput{
  id:Int!
  name:String!
  userId:Int!
  actions:[UserActions!]!
}



type CreatePermissionResponse{
    message:String!
}


input CreateEnterPriseInfoInput{
  userId: Int!
  name: String!
  email: String!
  telephone: String!
  taxNumberId: String!
  rccm: String!
  idNat: String!
}

type CreateEnterPriseInfoResponse{
  image:String
  name: String
  email: String
  telephone: String
  taxNumberId: String
  rccm: String
  idNat: String

}


input DeleteUserInput{
  userId:Int!
  userCode:String!
}
type DeleteUserResponse{
  success:Boolean!
}
input BlockerUserInput{
  status:Boolean!
  userCode:String!
}
type BlockerUserResponse{
  success:Boolean!
}
type Mutation{
    registerMainUser(input:UserInput!): CreateUserResponse!
    createUserOwnByMainUser(input:CreateUserOwnByMainUserInput!): CreateUserResponse!
    updateUser(input:UpdateUserInput!): CreateUpdateUserResponse!
    updateUserPassword(input:updateUserPasswordInput!):Message!
    verifyOptNumber(input:VerifyOptNumberInput!):VerifyOtpResponse!
    uploadFile(file: Upload!,id:ID!): File!
    attribUserPermission(input:[CreateUserPermissionInput!]!):CreatePermissionResponse!
    updateUserPermission(userId:Int!,input:[CreateUserPermissionInput!]!):CreatePermissionResponse!
    createEnterpriseInfo(input:CreateEnterPriseInfoInput!):CreateEnterPriseInfoResponse!
    deleteUser(input:DeleteUserInput!):DeleteUserResponse!
    blockOrUnblockUser(input:BlockerUserInput!):BlockerUserResponse!
}


type Actions {
  id: Int!
  name: String!
}

type Userpermissions {
  id: Int!
  name:String!
  userId:Int!
  actions: [Actions!]!
}


type User{
    id:Int!
    userName:String
    email:String!
    telephone:String
    image:String
    role:String!
    userCode:String!
    userIsBlocked:Boolean!
    userpermissions:[Userpermissions!]
}

type GetAllUsersResponse{
   users:[User!]!
   count:Int!
   totalPages:Int!
}






type Query {
  users(userName:String!,userCode:String!,page:Int!): GetAllUsersResponse!
  getSubscribers(userCode:String!): GetAllUsersResponse!
  getSubscribeUsersByCode(userCode:String!): GetAllUsersResponse!
  user(id: ID!): User!
  
}





